/**
 *  In a FIFO queue, all new elements are inserted at the tail of the queue. Other kinds of queues may use different placement rules.
 Every Queue implementation must specify its ordering properties.

The offer method inserts an element if possible, otherwise returning false.
This differs from the Collection.add method, which can fail to add an element only by throwing an unchecked exception.
The offer method is designed for use when failure is a normal, rather than exceptional occurrence, for example, in fixed-capacity (or "bounded") queues.

The remove() and poll() methods remove and return the head of the queue.
Exactly which element is removed from the queue is a function of the queue's ordering policy, which differs from implementation to implementation.
The remove() and poll() methods differ only in their behavior when the queue is empty:
the remove() method throws an exception, while the poll() method returns null.

The element() and peek() methods return, but do not remove, the head of the queue.

The Queue interface does not define the blocking queue methods, which are common in concurrent programming.
These methods, which wait for elements to appear or for space to become available, are defined in the BlockingQueue interface, which extends this interface.

Queue implementations generally do not allow insertion of null elements, although some implementations, such as LinkedList, do not prohibit insertion of null.
Even in the implementations that permit it, null should not be inserted into a Queue,
as null is also used as a special return value by the poll method to indicate that the queue contains no elements.

Queue implementations generally do not define element-based versions of methods equals and
hashCode but instead inherit the identity based versions from class Object,
because element-based equality is not always well-defined for queues with the same elements but different ordering properties.
 */

/**
 * Deque is sub interface of queue           	Queue
 * Linked list implements deque                   |
 						Deque
			                          |
						Linked List
*/
